// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement()) @map("id")
  email              String    @unique @map("email")
  googleId           String?   @map("google_id")
  password           String?   @map("password")
  firstName          String    @map("first_name")
  lastName           String    @map("last_name")
  phone              String?   @map("phone")
  gender             String?   @map("gender")
  birthdate          DateTime? @map("birthdate")
  role               UserRole  @default(USER) @map("role")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  resetPasswordToken String?   @map("reset_password_token")
  status             Status

  partner    Partner?
  reviews    Review[]
  bookings   Booking[]
  promotions UserHavePromotion[]
}

model Partner {
  id          Int      @id @default(autoincrement()) @map("id")
  companyName String   @map("company_name")
  address     String   @map("address")
  userId      Int      @unique @map("user_id")
  taxNo       String   @map("tax_no")
  bankName    String   @map("bank_name")
  bankAccount String   @map("bank_account")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  status      Status   @map("status")

  user  User   @relation(fields: [userId], references: [id])
  hotel Hotel?
}

model Hotel {
  id           Int      @id @default(autoincrement()) @map("id")
  name         String   @map("name")
  detail       String   @map("detail") @db.Text
  address      String   @map("address")
  img          String?  @map("img")
  checkinTime  DateTime @map("checkin_time")
  checkoutTime DateTime @map("checkout_time")
  lat          Float    @map("lat")
  lng          Float    @map("lng")
  star         Int      @map("star")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  phone        String   @map("phone")
  webPage      String?  @map("web_page")
  isActive     Boolean  @default(true) @map("is_active")
  partnerId    Int      @unique @map("partner_id")

  rooms             Room[]
  reviews           Review[]
  partner           Partner         @relation(fields: [partnerId], references: [id])
  FacilitiesHotel   FacilitiesHotel @relation(fields: [facilitiesHotelId], references: [id])
  facilitiesHotelId Int             @unique
  Booking           Booking[]
}

model Room {
  id              Int        @id @default(autoincrement()) @map("id")
  name            String     @map("name")
  detail          String     @map("detail") @db.Text
  status          RoomStatus @default(AVAILABLE) @map("status")
  type            RoomType   @map("type")
  price           Decimal    @map("price") @db.Decimal(10, 2)
  recommendPeople Int        @map("recommend_people")
  size            Float?     @map("size")
  hotelId         Int        @map("hotel_id")
  facilityRoomId  Int        @unique @map("facility_room_id")
  roomAmount      Int        @map("room_amount")

  hotel Hotel @relation(fields: [hotelId], references: [id])

  images   RoomImg[]
  bookings BookingRoom[]

  FacilitiesRoom FacilitiesRoom @relation(fields: [facilityRoomId], references: [id])
}

model RoomImg {
  id     Int    @id @default(autoincrement()) @map("id")
  img    String @map("img")
  roomId Int    @map("room_id")

  room Room @relation(fields: [roomId], references: [id])
}

model FacilitiesHotel {
  id             Int     @id @default(autoincrement()) @map("id")
  isRoomService  Boolean @default(false) @map("is_roomservice")
  isReception    Boolean @default(false) @map("is_reception")
  isFitness      Boolean @default(false) @map("is_fitness")
  isParking      Boolean @default(false) @map("is_parking")
  isEVCharging   Boolean @default(false) @map("is_evcharging")
  isSwimmingPool Boolean @default(false) @map("is_swimmingpool")
  isRestaurant   Boolean @default(false) @map("is_restaurant")
  isBreakfast    Boolean @default(false) @map("is_breakfast")
  isChildren     Boolean @default(false) @map("is_children")
  isPetFriendly  Boolean @default(false) @map("is_petfriendly")
  isElevator     Boolean @default(false) @map("is_elevator")

  Hotel Hotel?
}

model FacilitiesRoom {
  id                Int     @id @default(autoincrement()) @map("id")
  isSmoking         Boolean @default(false) @map("is_smoking")
  isAirCondition    Boolean @default(false) @map("is_aircondition")
  isPrivateBathroom Boolean @default(false) @map("is_privatebathroom")
  isBalcony         Boolean @default(false) @map("is_balcony")
  isView            Boolean @default(false) @map("is_view")
  isTelevision      Boolean @default(false) @map("is_television")
  isRefrigerator    Boolean @default(false) @map("is_refrigerator")
  isShower          Boolean @default(false) @map("is_shower")
  isBathtub         Boolean @default(false) @map("is_bathtub")
  isWifi            Boolean @default(false) @map("is_wifi")
  Room              Room?
}

model Promotion {
  id              Int      @id @default(autoincrement()) @map("id")
  name            String   @map("name")
  img             String?  @map("img")
  code            String?  @map("code")
  description     String   @map("description") @db.Text
  discountPercent Float    @default(0) @map("discount_percent")
  discountValue   Float    @default(0) @map("discount_value")
  minimumSpend    Float    @default(0) @map("minimum_spend")
  maxDiscount     Float    @map("max_discount")
  usageLimit      Int      @map("usage_limit")
  userLimit       Int      @default(1) @map("user_limit")
  isActive        Boolean  @default(false) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  startDate       DateTime @map("start_date")
  endDate         DateTime @map("end_date")

  users UserHavePromotion[]
}

model UserHavePromotion {
  id          Int     @id @default(autoincrement()) @map("id")
  promotionId Int     @map("promotion_id")
  userId      Int     @map("user_id")
  isUsed      Boolean @default(false) @map("is_used")

  promotion Promotion @relation(fields: [promotionId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  Booking   Booking[]
}

model Booking {
  id                  Int           @id @default(autoincrement()) @map("id")
  UUID                String        @unique @map("uuid")
  status              BookingStatus @map("status")
  totalPrice          Decimal       @map("total_price") @db.Decimal(10, 2)
  checkinDate         DateTime      @map("checkin_date")
  checkoutDate        DateTime      @map("checkout_date")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  userId              Int           @map("user_id")
  hotelId             Int           @map("hotel_id")
  userHavePromotionId Int?          @map("user_have_promotion_id")

  user              User               @relation(fields: [userId], references: [id])
  hotel             Hotel              @relation(fields: [hotelId], references: [id])
  userHavePromotion UserHavePromotion? @relation(fields: [userHavePromotionId], references: [id])
  bookingRooms      BookingRoom[]
  payments          Payment?
  Review            Review?
}

model BookingRoom {
  id         Int @id @default(autoincrement()) @map("id")
  bookingId  Int @map("booking_id")
  roomId     Int @map("room_id")
  amountRoom Int @map("amount_room")

  booking Booking @relation(fields: [bookingId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement()) @map("id")
  content   String?  @map("content") @db.Text
  userId    Int      @map("user_id")
  bookingId Int      @unique @map("booking_id")
  hotelId   Int      @map("hotel_id")
  rating    Int      @map("rating")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  img       String?

  user    User    @relation(fields: [userId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
  hotel   Hotel   @relation(fields: [hotelId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement()) @map("id")
  paymentMethod PaymentMethod @map("payment_method")
  bookingId     Int           @unique @map("booking_id")
  createdAt     DateTime      @default(now()) @map("created_at")

  booking Booking @relation(fields: [bookingId], references: [id])
}

enum Status {
  ACTIVE
  INACTIVE
  BANNED
}

enum UserRole {
  USER
  PARTNER
  ADMIN
}

enum RoomStatus {
  AVAILABLE
  UNAVAILABLE
}

enum RoomType {
  SUITE
  DOUBLE
  MASTER
}

enum BookingStatus {
  PENING
  CONFIRM
  CANCEL
  FAILED
  REFUND
}

enum PaymentMethod {
  CREDITCARD
  SCAN
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}
